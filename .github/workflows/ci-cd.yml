```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t django-todo-app:latest .

  test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: todo_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        env:
          GITHUB_ACTIONS: true  # Устанавливаем переменную окружения
          DATABASE_URL: postgresql://user:password@localhost:5432/todo_db
        run: |
          python manage.py test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/django-todo-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/django-todo-app:latest

  monitor:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy monitoring stack
        run: |
          docker-compose up -d prometheus grafana alertmanager postgres_exporter
          sleep 60  # Увеличено время ожидания для стабильности
          curl -f http://localhost:9090/api/v1/status/config || echo "Prometheus not responding"

      - name: Check Prometheus alerts
        run: |
          curl -f http://localhost:9090/api/v1/alerts | grep PostgresDown || echo "No PostgresDown alert found"
```